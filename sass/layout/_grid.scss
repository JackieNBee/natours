.row {
    //first we need to define a width for the row
    // by standard it's 1140px
    // 1140px = 114rem
    // we use max-width insted of width;
    // if the viewport is smaller than 114rem, the row will fill 100% of the parent
    max-width: $grid-width;
    // background-color: #eee; // USED FOR TESTING
    // how to center row in viewport
    // center block element inside of another block element
    margin: 0 auto;

    // we want only the last row NOT to have bottom margin
    // it's time to use the not() pseudo-class
    // select everything except the last child
    // if the last child in the container is not a row (e.g. a button)
    // then the last row will have bottom margin obviously
    // so it's better to select the last div with class="row"
    &:not(:last-child) {
        // some gutter between rows
        margin-bottom: $gutter-vertical;

        // when screen shrinks into tablet portrait mode
        // reduce the vertical space between rows
        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    // when screen shrinks into tablet portrait mode
    // reduce the max-width of the row
    @include respond(tab-port) {
        // TODO: put the value into a variable
        max-width: 50rem;
        // add side padding on the row
        padding: 0 3rem;
    }

    // since we float the children of row, it will have 0 height
    // so we need to use the clearfix
    // .row::after {...} --> what happens here when we include clearfix
    @include clearfix;

    // all the coloms have width, background-color, float and margin-right in commom
    // we want to apply them to all the colums
    // we want to stick with the DRY principle
    // we don't want to use mixins --> doesn't make sense here?
    // we don't want to add a .col to every colum's class --> class="col col-1-of-4"
    // we use the attribute selector! --> best way in this case
    // select every element that has class attribute that starts with "col-"
    [class^="col-"] {
        // background-color: orangered; // USED FOR TESTING
        // since we're using a float layout we need to float the colums
        float: left;

        // only the last column of the row doesn't have right margin
        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            // we don't any horizontal gutter since they're not side by side anymore
            @include respond(tab-port) {
                margin-right: 0;
                // add some space between columns since they act like rows now
                margin-bottom: $gutter-vertical-small;
            }
        }

        // when screen shrinks into tablet portrait mode
        // transform columns into rows
        @include respond(tab-port) {
            width: 100% !important; // make sure to overwrite conflicts
        }
    }

    // class^ --> starts with
    // class* --> contains
    // class$ --> ends with
    // class= --> is equal to

    .col-1-of-2 {
        // width = (container's width - horizontal gutter) / 2
        // we need to use the native CSS calc() function because
        // because this calculation depends on the layout, happens when
        // the browser is rendered using the visual formatting model
        // only when the browser knows what rem/percentage... is
        // to use SASS variable in calc() we need to wrap it in #{...}
        width: calc((100% - #{$gutter-horizontal}) / 2);

    }

    .col-1-of-3 {
        // width = (container's width - horizontal gutter) / 3
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        // two col-1-of-3 plus the gutter between them
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        // width = (container's width - horizontal gutter) / 4
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    .col-2-of-4 {
        // two col-1-of-4 plus the gutter between them
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        // three col-1-of-4 plus the two gutters between them
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }

}