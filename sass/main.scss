/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/


$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey: #777;
$color-white: #fff;

/* CSS Reset */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;

    /* to use the power of inheritance */
    /* Because of performance. 
    It is faster to inherit that for every element (from the body) 
    than it is to directly select every element to set it (with the universal selector). */
    box-sizing: inherit;
}

html {
    /* overwrite default root font-size of the browser (16px) */
    /* 10px is chosen to make things easier since to conver from px to rem we only need to divide by 10 */
    /* in this way: 1rem = 10px */
    /* also now it easier to write media queries since by changing the font-size 
    the browser does a lot of auto work for us */
    /* for example normally we have 10px font-size with 30px padding around the page,
    by changing the the font-size to 5px we have automatically 15px of padding! */
    /* it is very useful in smaller screens where we set smaller font but the layout stays consistent */
    /* font-size: 10px; */

    /* it is bad practice to set root font-size in px */
    /* because of accessibility concern: to let the user set the font-size in the browser settings */
    /* by default it's 16px but if the user set it to 20px it wouldn't work because we hardcoded a value */
    /* so we need to use percentages: 62.5% of 16px = 10px */
    /* 100% = 16px */
    /* proportion used for value calculation: 100:16 = x:10 */
    font-size: 62.5%;

}


/* We put font style into body because in this way we can use the power of inheritance */
/* instead of selecting everything */
body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7;
    color: $color-grey;
    padding: 3rem;

    /* box-sizing gets inherited by all elements */
    box-sizing: border-box;
}

.header {
    height: 95vh;
    background-image: linear-gradient(to right bottom,
            /* set opacity to 80% so we can see background img */
            rgba($color-primary-light, 0.8),
            rgba($color-primary-dark, 0.8)),
        url(../img/hero.jpg);
    /* always try to fit the width of the viewport */
    background-size: cover;
    /* keep the top of the image the same when resizing */
    background-position: top;
    position: relative;


    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

/* animate the logo on hover */
/* .logo-box:hover .logo {
    animation: moveInRight 1s ease-out;
} */

.logo {
    height: 3.5rem;
}

.text-box {
    /* to center the box */
    position: absolute;
    /* top and left are relative to the parent element */
    /* 40% instead of 50% to make it feel more centered */
    top: 40%;
    left: 50%;
    /* translate is relative to the element itself */
    /* otherwise text STARTS at center, we want the MIDDLE of the text to be centered */
    transform: translate(-50%, -50%);
    /* to center the button's */
    text-align: center;
}

.heading-primary {
    color: $color-white;
    text-transform: uppercase;

    /* little hack/fix for the heading's shaky text animation */
    /* however in Chrome's last versione it seems to work fine even without this hack */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary-main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
}

.heading-primary-sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    /* short way */
    animation: moveInRight 1s ease-out;
}

/* CSS Animations */
@keyframes moveInLeft {

    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }

}

@keyframes moveInRight {

    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }

}

@keyframes moveInBottom {

    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }

}

/* normal and visited state */
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* animations */
    transition: all .2s;
    /* for the absolut position of the ::after element */
    position: relative;
    /* to restore the button's font-size 16px = 1.6rem */
    font-size: 1.6rem
}

.btn:hover {
    /* move up */
    transform: translateY(-.3rem);
    /* offsetX, offsetY, blur radius, color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2);
}

/* How box-shadow works:

            offsetY
                ^
                |
    button - - - - - shadow
    |
    | -> offsetX
    |
    shadow


*/


/* when clicked */
.btn:active {
    /* push down the button a little bit */
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .2);
}

.btn-white {
    background-color: $color-white;
    color: $color-grey;
}

/* initial state of the ::after pseudo element */
.btn::after {
    content: "";
    /* like the normal button */
    display: inline-block;
    /* pseudo element is treated like a child of the button */
    /* we want it to be the same */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* to put it behind the parent element */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* need to define transition in the initial state to affect also the other states */
    transition: all .4s;
}

.btn-white::after {
    background-color: $color-white;
}

.btn:hover::after {
    /* to have more control than normal scale() */
    transform: scaleX(1.4) scaleY(1.6);
    /* to make the element fade out */
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /* to apply animation's 0% state to the initial state */
    /* that's a fix because we're applying a deleay to the button */
    /* so at the beginning it's still visible */
    animation-fill-mode: backwards;
}